let animals = []
let cats = []
let frogs = []

let myCat = @

myCat in cats -> myCat !in frogs
myCat in frogs -> myCat !in cats

myCat in cats -> myCat in animals
myCat in frogs -> myCat in animals

{
	myCat in cats
	myCat in frogs
}

// let x: Number
// x < 5

// let y = Number
// y = -1
// y > 0

// #log(x)

// from https://en.wikipedia.org/wiki/Forward_chaining
// If X croaks and X eats flies - Then X is a frog
// If X chirps and X sings - Then X is a canary
// If X is a frog - Then X is green
// If X is a canary - Then X is blue

// croaks is []
// eatsFlies is []
// frogs is []
// green is []
// poisonSkin is []
// doNotTouch is []

// X is @

// X in croaks & X in eatsFlies

// X in poisonSkin -> X in doNotTouch

// X in frogs -> X in green
// X in croaks & X in eatsFlies -> X in frogs
// X in frogs & X in green -> X in poisonSkin

//--------

// UiElement is []
// uiRoot is [] // @[]
// #click(target: UiElement) -> target.text = "click"

// test is @
// true -> test in UiElement

// #onStart() -> {
// 	test.type = "text"
// 	test.text = "testing"
	
// 	#log(test)
// 	#click(test)
// 	#log(test)
// }

//--------

// todos is []//[title: String, body: String, visible: Bool]
// todosUi is []//[type: "text", text: String]

// always -> todos =>(todo) todo & @(title: capitalize(todo))

// always -> todosUi
// 	= todos
// 	~>(todo) todo.visible = true
// 	=>(todo) @(
// 		type: "text",
// 		text: todo.title + "\n" + todo.body
// 	)

// setupTodo(title: String, body: String, visible: Bool) ->(output) {
// 	true -> output = @(
// 		title: title, body: body, visible: visible
// 	)
// }

// capitalize(text) -> (output) {
// 	//...
// }

// todo is @
// // true -> setupTodo(todo, "test", "testing", true)
// todo = setupTodo("test", "testing", true)

//--------

// animals is []
// cats is []

// for(Any) -->(thing) {
// 	thing in cats -> thing in animals
// }

// myCat is @
// true -> myCat in cats

// myCat in cats
// myCat in animals
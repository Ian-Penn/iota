builtin = #import "builtin"

string = "Hello, World"
string

Itype = {
	__prototype__ = Type // or FunctionType
	argType = Number
	returnType = Number
}

// I = @x(Number) x

// I = {
// 	__prototype__ = Function
// 	argName = "x"
// 	argType = Number
// 	data = [x]
// }

// test = {
// 	I = @x(Number) x
// }

// Number = builtin.Float64

// Vec2 = struct {
// 	x Number,
// 	y Number
// } & {
// 	new = @x(:Number) @y(:Number)
// 		&Vec2{
// 			x = x,
// 			y = y
// 		}
	
// 	add = @v1(Vec2) @v2(:Vec2)
// 		(+) = Number.+
// 		&Vec2{
// 			x = v1.x + v2.x,
// 			y = v1.y + v2.y
// 		}
// }

// Vec2 = {
// 	__prototype__ = Type
// 	fields = {
// 		x = Number
// 		y = Number
// 	}
	
// 	new = @x(:Number) @y(:Number)
// 		&Vec2{
// 			x = x,
// 			y = y
// 		}
	
// 	add = @v1(Vec2) @v2(:Vec2)
// 		(+) = Number.+
// 		&Vec2{
// 			x = v1.x + v2.x,
// 			y = v1.y + v2.y
// 		}
// }

// bad
// 1 & {...}

// one = {
// 	__prototype__ = Number
// 	value
// }

// vec = {
// 	__prototype__ = Vec2
// 	x = 1
// 	y = 2
// }

// a = Vec2.new x: 1 y: 2
// b = Vec2.new x: 10 y: 20

// Vec2.add a to: b

// Case = {
// 	__prototype__ = Enum
// 	tag = 0
// 	value = {...}
// }